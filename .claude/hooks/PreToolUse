#!/usr/bin/env python3
"""
PreToolUse Hook - Runs before tool execution
Validates tool usage and applies agent-specific constraints
"""

import os
import sys
import json
from pathlib import Path

# Read hook data from stdin
try:
    hook_data = json.load(sys.stdin)
except:
    # If no JSON data, exit silently
    sys.exit(0)

# Extract relevant information
tool_name = hook_data.get('tool', {}).get('name', '')
tool_params = hook_data.get('tool', {}).get('params', {})
session_id = hook_data.get('sessionId', '')
project_dir = os.environ.get('CLAUDE_PROJECT_DIR', '.')

# Get current agent context
agent_name = os.environ.get('KIRO_AGENT_NAME', '')
agent_tier = os.environ.get('KIRO_AGENT_TIER', '')
task_id = os.environ.get('KIRO_TASK_ID', '')

# Load agent constraints if available
agent_file = Path(project_dir) / '.claude' / 'agents' / f'{agent_name}.yml'
if agent_file.exists() and agent_name:
    import yaml
    with open(agent_file) as f:
        agent_data = yaml.safe_load(f)
    
    # Check tool allowlist
    tools_allowed = agent_data.get('tools_allowed', [])
    if tools_allowed and tool_name not in tools_allowed:
        # Deny tool usage
        response = {
            "decision": "deny",
            "permissionDecisionReason": f"Tool '{tool_name}' not allowed for {agent_tier} agent {agent_name}. Allowed tools: {', '.join(tools_allowed)}"
        }
        print(json.dumps(response))
        sys.exit(0)
    
    # Apply resource limits
    resource_limits = agent_data.get('resource_limits', {})
    
    # Check file limits for Edit/Write tools
    if tool_name in ['Edit', 'MultiEdit', 'Write']:
        max_files = resource_limits.get('max_files_changed', 100)
        # Track files changed in this session
        tracker_file = Path(project_dir) / '.claude' / 'tasks' / task_id / 'files_changed.txt'
        if tracker_file.exists():
            with open(tracker_file) as f:
                files_changed = len(f.read().strip().split('\n'))
            
            if files_changed >= max_files:
                response = {
                    "decision": "deny", 
                    "permissionDecisionReason": f"File change limit reached ({max_files} files). This is a {agent_tier} agent constraint."
                }
                print(json.dumps(response))
                sys.exit(0)

# Security checks for Bash/Shell commands
if tool_name == 'Bash':
    command = tool_params.get('command', '')
    
    # Load forbidden commands
    forbidden_commands = [
        "rm -rf /",
        "sudo",
        "eval",
        "exec",
        "curl evil",
        "wget evil",
        "dd if=/dev/zero"
    ]
    
    for forbidden in forbidden_commands:
        if forbidden in command:
            response = {
                "decision": "deny",
                "permissionDecisionReason": f"Security: Command contains forbidden pattern '{forbidden}'"
            }
            print(json.dumps(response))
            sys.exit(0)

# Log tool usage for metrics
log_dir = Path(project_dir) / '.claude' / 'scoreboard'
if log_dir.exists():
    log_entry = {
        "timestamp": hook_data.get('timestamp', ''),
        "event": "pre_tool_use",
        "tool": tool_name,
        "agent": agent_name,
        "task_id": task_id,
        "session_id": session_id
    }
    
    with open(log_dir / 'tool_usage.jsonl', 'a') as f:
        f.write(json.dumps(log_entry) + '\n')

# Allow tool usage by default
response = {
    "decision": "allow"
}
print(json.dumps(response))